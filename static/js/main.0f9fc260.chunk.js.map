{"version":3,"sources":["components/ContactForm/ContactForm.module.css","redux/actions.js","services/contactsAPI.js","redux/operations.js","components/ContactForm/ContactForm.jsx","redux/selectors.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","filterContacts","createAction","value","payload","id","uuidv4","name","number","getContacts","a","axios","get","data","addContacts","newContact","post","res","deleteContacts","delete","defaults","baseURL","fetchContacts","createAsyncThunk","_","rejectWithValue","deleteContactsOperation","status","Error","message","addContactsOperation","ContactForm","useState","setName","setNumber","dispatch","useDispatch","handleInput","e","target","resetState","className","s","contactForm","onSubmit","preventDefault","onChange","type","placeholder","pattern","title","required","getFilter","state","items","filter","getIsLoading","isLoading","getVisibleContacts","createSelector","contacts","normalizedFilter","toLowerCase","item","includes","Filter","useSelector","actions","ContactsList","visibleContacts","useEffect","map","contact","onClick","App","createReducer","Action","fulfilled","pending","rejected","combineReducers","store","configureStore","reducer","middleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f9fc260.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__1AS3u\"};","import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const addContacts = createAction(\"app/add\", (value) => ({\n  payload: {\n    id: uuidv4(),\n    name: value.name,\n    number: value.number,\n  },\n}));\n\nexport const deleteContacts = createAction(\"app/delete\");\n\nexport const filterContacts = createAction(\"app/filter\");\n\nexport const fetchContactsRequest = createAction(\"app/fetchContactsRequest\");\n\nexport const fetchContactsSuccsess = createAction(\"app/fetchContactsSuccsess\");\n\nexport const fetchContactsError = createAction(\"app/fetchContactsError\");\n\nexport const fetchAddContacts = createAction(\"app/fetchContactsError\");\n","import axios from \"axios\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\n\r\nexport async function getContacts() {\r\n  const { data } = await axios.get(\"/contacts\");\r\n  return data;\r\n}\r\n\r\nexport async function addContacts(newContact) {\r\n  const res = await axios.post(\"/contacts\", newContact);\r\n  return res;\r\n}\r\n\r\nexport async function deleteContacts(id) {\r\n  const res = await axios.delete(`/contacts/${id}`);\r\n  return res;\r\n}\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport {\r\n  getContacts,\r\n  addContacts,\r\n  deleteContacts,\r\n} from \"../services/contactsAPI\";\r\n// import {\r\n//   fetchContactsSuccsess,\r\n//   fetchContactsRequest,\r\n//   fetchContactsError,\r\n//   fetchAddContacts,\r\n// } from \"./actions\";\r\n\r\n// export const fetchContactsOperation = () => async (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n//   try {\r\n//     const contacts = await getContacts();\r\n//     dispatch(fetchContactsSuccsess(contacts));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   }\r\n// };\r\n\r\n// export const addContactsOperation = () => async (dispatch) => {\r\n//   dispatch(fetchAddContacts());\r\n//   try {\r\n//     const contacts = await addContacts();\r\n//     dispatch(fetchContactsSuccsess(contacts));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   }\r\n// };\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  \"fetchContacts\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      return await getContacts();\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContactsOperation = createAsyncThunk(\r\n  \"deleteContactsOperation\",\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      const res = await deleteContacts(id);\r\n      if (res.status !== 200) {\r\n        throw new Error(res.message);\r\n      }\r\n      return await getContacts();\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\nexport const addContactsOperation = createAsyncThunk(\r\n  \"addContactsOperation\",\r\n  async (value, { rejectWithValue }) => {\r\n    try {\r\n      const res = await addContacts(value);\r\n\r\n      return await getContacts();\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as actions from \"../../redux/actions\";\nimport s from \"./ContactForm.module.css\";\nimport { addContactsOperation } from \"../../redux/operations\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const id = uuidv4();\n\n  const dispatch = useDispatch();\n\n  const handleInput = (e) => {\n    const { name, value } = e.target;\n\n    name === \"name\" ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(addContactsOperation({ name, number, id }));\n    resetState();\n  };\n\n  const resetState = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.contactForm} onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input\n          onChange={handleInput}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"New contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number:\n        <input\n          onChange={handleInput}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          placeholder=\"Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Отправить</button>\n    </form>\n  );\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = (state) => state.items.contacts;\n\nexport const getFilter = (state) => state.items.filter;\n\nexport const getIsLoading = (state) => state.items.isLoading;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../redux/actions\";\nimport { getFilter } from \"../../redux/selectors\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  return (\n    <label>\n      Find contacts by name:\n      <input\n        onChange={(e) => dispatch(actions.filterContacts(e.target.value))}\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        placeholder=\"find name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { getVisibleContacts, getIsLoading } from \"../../redux/selectors\";\nimport * as actions from \"../../redux/actions\";\nimport { fetchContacts, deleteContactsOperation } from \"../../redux/operations\";\nimport { useEffect } from \"react\";\n\nfunction ContactsList() {\n  const dispatch = useDispatch();\n\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {isLoading && <p>Loading...</p>}\n      {visibleContacts.map((contact) => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"button\"\n            onClick={() => dispatch(deleteContactsOperation(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactsList;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport { fetchContactsOperation } from \"./redux/operations\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport { getContacts } from \"./redux/selectors\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  deleteContactsOperation,\n  fetchContacts,\n  addContactsOperation,\n} from \"./operations\";\n\nimport * as Action from \"./actions\";\n\n// const contacts = createReducer([], {\n//   [Action.deleteContacts]: (state, { payload }) =>\n//     state.filter((contact) => contact.id !== payload.id),\n\n//   [Action.addContacts]: (state, { payload }) => {\n//     const findContact = state.find((contact) => {\n//       return contact.name === payload.name;\n//     });\n//     return !findContact\n//       ? [payload, ...state]\n//       : alert(`${payload.name} is already in contact`);\n//   },\n// });\n\nconst filter = createReducer(\"\", {\n  [Action.filterContacts]: (_, { payload }) => payload,\n});\n\n// const entities = createReducer([], {\n//   [Action.fetchContactsSuccsess]: (_, action) => action.payload,\n// });\n\n// const isLoading = createReducer(false, {\n//   [Action.fetchContactsRequest]: () => true,\n//   [Action.fetchContactsSuccsess]: () => false,\n//   [Action.fetchContactsError]: () => false,\n// });\n\n// const error = createReducer(null, {\n//   [Action.fetchContactsError]: (_, action) => action.payload,\n//   [Action.fetchContactsRequest]: () => null,\n// });\n\nconst contacts = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [deleteContactsOperation.fulfilled]: (_, { payload }) => payload,\n  [addContactsOperation.fulfilled]: (_, { payload }) => payload,\n});\n\nconst getIsLoading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  getIsLoading,\n});\n","import logger from \"redux-logger\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducers\";\n\nconst store = configureStore({\n  reducer: {\n    items: reducer,\n    middleware: [logger],\n  },\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}